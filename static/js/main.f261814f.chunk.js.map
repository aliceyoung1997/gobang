{"version":3,"sources":["Square.js","Board.js","Title.js","App.js","reportWebVitals.js","index.js"],"names":["Square","row","col","blackIsNext","updateBoard","winner","useState","color","setColor","className","onClick","current","Board","board","map","rowIndex","columnIndex","Title","window","location","reload","Game","Array","fill","setBoard","setWinner","positionRow","useRef","positionCol","useEffect","countChess","x","y","directionX","directionY","now","tempX","tempY","total","whoWins","newBoard","JSON","parse","stringify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f261814f.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nexport default function Square({ row, col, blackIsNext, updateBoard, winner }) {\r\n  const [color, setColor] = useState(null)\r\n  const handleClick = () => {\r\n    if (color) return\r\n    if (winner) return\r\n    blackIsNext.current ? setColor('white') : setColor('black')\r\n    blackIsNext.current = !blackIsNext.current\r\n    updateBoard(row, col)\r\n  }\r\n  return (\r\n    <button\r\n      className='square'\r\n      onClick={handleClick}>\r\n      <div className={color}></div>\r\n    </button>\r\n  )\r\n}","import Square from './Square.js';\r\n\r\nexport default function Board({ blackIsNext, board, updateBoard, winner }) {\r\n  return (\r\n    <div>\r\n      {board.map((row, rowIndex) => {\r\n        return (\r\n          <div className=\"board-row\" key={rowIndex}>\r\n            {board.map((col, columnIndex) =>\r\n              <Square\r\n                key={columnIndex}\r\n                row={rowIndex}\r\n                col={columnIndex}\r\n                blackIsNext={blackIsNext}\r\n                updateBoard={updateBoard}\r\n                winner={winner} />)}\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}","export default function Title({ blackIsNext, winner }) {\r\n  return (\r\n    <div className='title-container'>\r\n      <h1>五子棋</h1>\r\n      <div className='next-player'>\r\n        {winner ? `贏家：${winner === 'black' ? '黑棋' : '白棋'}` : `輪到：${blackIsNext.current ? '白棋' : '黑棋'}`}\r\n      </div>\r\n      <button\r\n        className='restart'\r\n        onClick={() => window.location.reload()}>\r\n        Restart\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\nimport { useState, useRef, useEffect } from 'react';\nimport Board from './Board.js';\nimport Title from './Title.js';\n\nfunction Game() {\n  const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)))\n  const [winner, setWinner] = useState(null)\n  const positionRow = useRef()\n  const positionCol = useRef()\n  const blackIsNext = useRef(false)\n  const updateBoard = (row, col) => {\n    positionRow.current = row\n    positionCol.current = col\n    const newBoard = JSON.parse(JSON.stringify(board))\n    newBoard[row][col] = blackIsNext.current ? 'black' : 'white'\n    setBoard(newBoard)\n  }\n  useEffect(() => {\n    if (!positionRow.current && !positionCol.current) return\n    whoWins(board, positionRow.current, positionCol.current)\n    function whoWins(board, x, y) {\n      if (\n        countChess(board, x, y, 1, 0) + countChess(board, x, y, -1, 0) >= 4 ||\n        countChess(board, x, y, 0, 1) + countChess(board, x, y, 0, -1) >= 4 ||\n        countChess(board, x, y, 1, 1) + countChess(board, x, y, -1, -1) >= 4 ||\n        countChess(board, x, y, 1, -1) + countChess(board, x, y, -1, 1) >= 4\n      ) {\n        setWinner(board[x][y])\n      }\n    }\n\n    function countChess(board, x, y, directionX, directionY) {\n      const now = board[x][y]\n      let tempX = x\n      let tempY = y\n      let total = 0\n      while (total >= 0) {\n        tempX += directionX\n        tempY += directionY\n        if (board[tempX] && board[tempX][tempY] === now) {\n          total++\n        } else {\n          break\n        }\n      }\n      return total\n    }\n  }, [board])\n\n  return (\n    <div className='game'>\n      <Title\n        blackIsNext={blackIsNext}\n        winner={winner} />\n      <div className='game-board'>\n        <Board\n          blackIsNext={blackIsNext}\n          board={board}\n          updateBoard={updateBoard}\n          winner={winner} />\n      </div>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}